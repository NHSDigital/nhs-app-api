using System;
using System.Linq;
using System.Net;
using FluentAssertions;
using Hl7.Fhir.Model;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Nhs.App.Api.Integration.Tests.Extensions;
using Task = System.Threading.Tasks.Task;

namespace Nhs.App.Api.Integration.Tests
{
    [TestClass]
    public class ReportRetrievalHttpFunctionsTests : CommunicationHttpFunctionBase
    {
        private static TestConfiguration _testConfiguration;

        [ClassInitialize]
        public static void ClassInitialise(TestContext context)
        {
            _testConfiguration = new TestConfiguration(context);
            TestClassSetup(_testConfiguration);
        }

        [TestMethod]
        public async Task EventReportGet_InvalidBearerToken_Returns401Unauthorized()
        {
            // Arrange
            using var httpClient = CreateHttpClient();

            var correlationId = Guid.NewGuid().ToString();

            // Act
            var response = await httpClient.GetAsync("communication/event-report/?day=2021-03-08",
                correlationId, "invalidAccessToken");

            // Assert
            response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);

            var operationOutcome = await ParseOperationOutcome(response);

            var issue = operationOutcome.Issue.Single();
            issue.Severity.Should().Be(OperationOutcome.IssueSeverity.Error);
            issue.Code.Should().Be(OperationOutcome.IssueType.Forbidden);
            issue.Diagnostics.Should().Be("Invalid Access Token");

            response.Headers.ShouldContainHeader("X-Correlation-ID", correlationId);
        }

        [DataTestMethod]
        [DataRow("2001-01-01")]
        [DataRow("2051-01-01")]
        public async Task EventReportGet_NoFileAvailableForRequestedDate_Returns404NotFound(string dayParameter)
        {
            // Arrange
            using var httpClient = CreateHttpClient();

            // Act
            var response = await httpClient.GetAsync($"communication/event-report/?day={dayParameter}");

            // Assert
            response.StatusCode.Should().Be(HttpStatusCode.NotFound);

            var operationOutcome = await ParseOperationOutcome(response);

            var issue = operationOutcome.Issue.Single();
            issue.Severity.Should().Be(OperationOutcome.IssueSeverity.Error);
            issue.Code.Should().Be(OperationOutcome.IssueType.NotFound);
            issue.Diagnostics.Should().Contain("Report not found");
        }

        [DataTestMethod]
        [DataRow("2021-02-30")]
        [DataRow("2021-13-01")]
        [DataRow("09-03-2021")]
        [DataRow("2021-3-9")]
        [DataRow("2021-03-08T01:00:00")]
        public async Task EventReportGet_InvalidDayParameter_Returns400BadRequest(string dayParameter)
        {
            // Arrange
            using var httpClient = CreateHttpClient();

            // Act
            var response = await httpClient.GetAsync($"communication/event-report/?day={dayParameter}");

            // Assert
            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);

            var operationOutcome = await ParseOperationOutcome(response);

            var issue = operationOutcome.Issue.Single();
            issue.Severity.Should().Be(OperationOutcome.IssueSeverity.Error);
            issue.Code.Should().Be(OperationOutcome.IssueType.Invalid);
            issue.Expression.Single().Should().Be("day");
            issue.Diagnostics.Should().Be("Invalid format");
        }

        [TestMethod]
        public async Task EventReportGet_NoCorrelationIdPassed_NoCorrelationIdHeaderInTheResponse()
        {
            // Arrange
            using var httpClient = CreateHttpClient();

            // Act
            var response = await httpClient.GetAsync("communication/event-report/?day=2021-03-08");

            // Assert
            response.Headers.ShouldNotContainHeader("X-Correlation-ID");
        }

        // TODO - NHSO-13473 - revisit this test when "real" files are being generated by timer function
        [DataTestMethod]
        [DataRow("2021-01-01", @"{""Name"": ""Integration test file 1""}")]
        [DataRow("2021-01-02", @"{""Name"": ""Integration test file 2""}")]
        public async Task EventReportGet_ValidRequestForDayWhereFileExists_ContentsOfFileAreReturned(string dayParameter, string expectedFileContents)
        {
            // Arrange
            using var httpClient = CreateHttpClient();

            // Act
            var response = await httpClient.GetAsync($"communication/event-report/?day={dayParameter}");

            // Assert
            response.StatusCode.Should().Be(HttpStatusCode.OK);

            var responseString = await response.Content.ReadAsStringAsync();
            responseString.Should().Be(expectedFileContents);
        }
    }
}
